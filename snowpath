#!/usr/bin/env python3

from typing import Optional
from rich.table import Table
from typing_extensions import Annotated
from rich.console import Console
from lib.display import route_video
from lib.districts import load_district
from lib.snow import create_snow
from drone.analyze import analyze_snow
from snowplow.clear import clear

import typer
import os
import lib.log as log
import osmnx as ox




app = typer.Typer(no_args_is_help=True)
console = Console()
err_console = Console(stderr=True)


def delete_data_callback(value: bool) -> None:
    if value:
        if os.path.exists("data/districts.pkl"):
            log.info("Deleting data/ditricts.pkl")
            os.remove("data/districts.pkl")
        if os.path.exists("data/routes.pkl"):
            log.info("Deleting data/routes.pkl")
            os.remove("data/routes.pkl")
        if os.path.exists("data/snow.pkl"):
            log.info("Deleting data/snow.pkl")
            os.remove("data/snow.pkl")
        raise typer.Exit()


@app.callback()
def main(
    _: Annotated[
        Optional[bool],
        typer.Option(
            "--delete-data",
            callback=delete_data_callback,
            help="Remove saved data.",
        ),
    ] = None
) -> None:
    pass

@app.command(help="Drone related computing.")
def drone(
    district: Annotated[
        str, typer.Argument(help="The district/city to analyze.")
    ] = "Montreal",
    video: Annotated[
        Optional[str],
        typer.Option(
            help="Generate a video that represents the drone route. Save it to [VIDEO].mp4"
        ),
    ] = None,
    nb_threads: Annotated[
        int,
        typer.Option(
            help="Number of threads to use when eulerizing or video generation"
        ),
    ] = 1,
) -> None:
    """
    Launch the drone and analyze the distict/city.
    """

    log.info(f"CMD: drone analyze '{district}' threads: '{nb_threads}'")

    dist_snow, route, snow, distance = analyze_snow(district)
    table = Table(title="Results")

    table.add_column("District")
    table.add_column("Distance")
    table.add_column("Speed")
    table.add_column("Time")
    table.add_column("Cost")

    table.add_row(
        district,
        f"{round(distance, 2)}m",
        "60km/h",
        f"{round(distance / 1000 / 60, 2)}h",
        f"{100 + round(0.01 * (distance / 1000), 2)}â‚¬",
    )

    if video:
        log.info("Generating video")
        route_video(dist_snow, route, "red", video, nb_threads, 16)

    console.print(table)

    snow = create_snow(snow.data, snow.related_district)

    log.info(f"Generated snow data for {district} with id {snow.id}")


@app.command()
def display(
    name: Annotated[
        str, typer.Argument(help="The district name to display.")
    ],
    output_file: Annotated[
        str, typer.Option(help="File name to save the graph image.")
    ] = "",
) -> None:
    """
    Display a specific district.
    If --output-file [FILEPATH] is provided, store the graph in FILEPATH.
    """
    log.info(
        f"CMD: display district '{name}' with output file '{output_file}'"
    )

    dist = load_district(name)

    if output_file != "":
        log.info(f"Saving district '{name}' in file '{output_file}'")

        ox.plot_graph(
            dist.graph,
            save=True,
            filepath=output_file,
            node_size=1,
            show=False,
        )
    else:
        log.info(f"Displaying district '{name}'")

        ox.plot_graph(dist.graph)


@app.command()
def snowplow(
    id: Annotated[
        int,
        typer.Argument(
            help="The id of the snow data generated by the drone."
        ),
    ] = 0
) -> None:
    """
    Start the snowplows.
    """
    clear(id)

if __name__ == "__main__":
    app()
