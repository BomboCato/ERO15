#!/usr/bin/env python3

import os
from typing import Optional

import osmnx as ox
import typer
from rich.console import Console
from rich.table import Table
from typing_extensions import Annotated

import lib.log as log
from drone.analyze import analyze_snow
from lib.display import (
    display_snow,
    save_snow,
    save_image_district, save_image_route, save_video_route, display_image_route,
)
from lib.districts import load_district
from lib.route import load_route, create_route, RouteType
from lib.snow import create_snow, load_snow
from snowplow.clear import clear_eul

app = typer.Typer(no_args_is_help=True, add_completion=False)
display_app = typer.Typer(no_args_is_help=True, add_completion=False)

console = Console()
err_console = Console(stderr=True)


def delete_data_callback(value: bool) -> None:
    if value:
        if os.path.exists("lib/districts.pkl"):
            log.info("Deleting lib/districts.pkl")
            os.remove("lib/districts.pkl")
        if os.path.exists("lib/routes.pkl"):
            log.info("Deleting lib/routes.pkl")
            os.remove("lib/routes.pkl")
        if os.path.exists("lib/snow.pkl"):
            log.info("Deleting lib/snow.pkl")
            os.remove("lib/snow.pkl")
        raise typer.Exit()


@app.callback()
def main(
        _: Annotated[
            Optional[bool],
            typer.Option(
                "--delete-data",
                callback=delete_data_callback,
                help="Remove saved data.",
            ),
        ] = None
) -> None:
    pass


@app.command(help="Drone related computing.", no_args_is_help=True)
def drone(
        district_name: Annotated[
            str, typer.Argument(help="The district/city to analyze.")
        ],
        min_snow: Annotated[
            float, typer.Option(help="The minimum snow level to consider.")
        ] = 0,
        max_snow: Annotated[
            float, typer.Option(help="The maximum snow level to consider.")
        ] = 15,
) -> None:
    """
    Launch the drone and analyze the district/city.
    """

    dist_snow, route_data, snow_data, distance = analyze_snow(district_name, min_snow, max_snow)
    table = Table(title="Results")

    table.add_column("District")
    table.add_column("Distance")
    table.add_column("Speed")
    table.add_column("Time")
    table.add_column("Cost")

    table.add_row(
        district_name,
        f"{round(distance, 2)}m",
        "60km/h",
        f"{round(distance / 1000 / 60, 2)}h",
        f"{100 + round(0.01 * (distance / 1000), 2)}â‚¬",
    )

    console.print(table)

    snow_data = create_snow(snow_data.data, snow_data.related_district)

    log.info(f"Generated snow data for '{district_name}' with id {snow_data.id}")

    route_data = create_route(route_data.route, route_data.related_district, RouteType.DRONE)

    log.info(f"Generated route data for '{district_name}' with id {route_data.id}")


@display_app.command(help="Display/save the specified district.", no_args_is_help=True)
def district(
        name: Annotated[
            str, typer.Argument(help="The district name to display/save.")
        ],
        output: Annotated[
            str, typer.Option(help="File name to save the district image.")
        ] = None,
) -> None:
    """
    Display/save a specific district.
    If --output [FILEPATH] is provided, store the graph in FILEPATH.
    """
    dist = load_district(name)

    if output:
        log.info(f"Displaying district '{name}'")

        ox.plot_graph(dist.graph)
    else:
        log.info(f"Saving district '{name}' in '{output}'")

        save_image_district(dist, output)


@display_app.command(help="Display/save snow data.", no_args_is_help=True)
def snow(
        snow_id: Annotated[
            int,
            typer.Argument(
                help="The snow id to display/save. The id must exist in the database."
            ),
        ],
        snow_color: Annotated[
            str, typer.Option(help="The road color when there is snow.")
        ] = "cyan",
        road_color: Annotated[
            str, typer.Option(help="The road color when there is not snow.")
        ] = "white",
        output: Annotated[
            str, typer.Option(help="The output file to save the snow data.")
        ] = None,
) -> None:
    """
    Display/save snow data.
    """

    snow_data = load_snow(snow_id)
    if not snow_data:
        log.error(
            f"Snow id {snow_id} does not exists. You must specify an known snow id."
        )
        raise typer.Exit(code=1)

    if output:
        log.info(
            f"CMD: save snow from '{snow_data.related_district}' with id '{snow_data.id}' in '{output}', "
            f"snow-color: '{snow_color}', road_color: '{road_color}'"
        )
        save_snow(snow_data, snow_color, road_color, output)
    else:
        log.info(
            f"CMD: display snow from '{snow_data.related_district}' with id '{snow_data.id}', "
            f"snow-color: '{snow_color}', road_color: '{road_color}'"
        )
        display_snow(snow_data, snow_color, road_color)


@display_app.command(help="Display/save route data.", no_args_is_help=True)
def route(
        route_id: Annotated[int, typer.Argument(help="The route id to display/save.")],
        route_color: Annotated[str, typer.Option(help="The route color.")] = "red",
        image: Annotated[
            str, typer.Option(help="The output file to save the route image.")
        ] = None,
        video: Annotated[
            str, typer.Option(help="The output file to save the route video.")
        ] = None,
        nb_threads: Annotated[
            int, typer.Option(help="The number of threads to use for the video.")
        ] = 1,
        img_per_sec: Annotated[
            int, typer.Option(help="The number of images per second for the video.")
        ] = 16,
) -> None:
    """
    Display/save route data.
    """

    route_data = load_route(route_id)
    district_data = load_district(route_data.related_district)

    if not route_data:
        log.error(
            f"Route id {route_id} does not exists. You must specify an known route id."
        )
        raise typer.Exit(code=1)

    if image:
        log.info(
            f"CMD: save route from '{route_data.related_district}' with id '{route_data.id}' in '{image}'"
        )
        save_image_route(district_data, route_data, route_color, image)

    if video:
        log.info(
            f"CMD: save route from '{route_data.related_district}' with id '{route_data.id}' in '{video}'"
        )
        save_video_route(district_data, route_data, route_color, video, nb_threads, img_per_sec)

    if not image and not video:
        log.info(
            f"CMD: display route from '{route_data.related_district}' with id '{route_data.id}'"
        )
        display_image_route(district_data, route_data, route_color)


@app.command(help="Snowplow related computing.", no_args_is_help=True)
def snowplow(
        snow_id: Annotated[
            int,
            typer.Argument(
                help="The id of the snow data generated by the drone."
            ),
        ]
) -> None:
    """
    Start the snowplows.
    """
    routes = clear_eul(snow_id)

    for route_data in routes:
        new_route = create_route(route_data.route, route_data.related_district, RouteType.SNOWPLOW)

        log.info(f"Generated route data for '{route_data.related_district}' with id {new_route.id}")


if __name__ == "__main__":
    app.add_typer(
        display_app,
        name="display",
        help="Display districts, routes and snow data.",
    )
    app()
